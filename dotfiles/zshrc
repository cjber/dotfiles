if [ -z "$DISPLAY" -a $XDG_VTNR -eq 1 ]; then
  startx
fi

bindkey -v

eval "$(direnv hook zsh)"

export DOTNET_ROOT=/usr/bin/dotnet
export FZF_DEFAULT_COMMAND='fd --type f --color=always --hidden --follow -E .git -E "*.html"'
export FZF_DEFAULT_OPTS='--height=40% --layout=reverse --border=sharp --color "border:#414868,bg+:#414868" --preview-window right:noborder --ansi'
export EDITOR='nvim'
export MANPAGER='nvim -c Man!'
export LANG="en_GB.UTF-8"

zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' list-colors \
  "di=34" "ln=35" "so=32" "pi=33" "ex=31" "bd=34;46" "cd=34;43" \
  "su=30;41" "sg=30;46" "tw=30;42" "ow=30;43"
zstyle ':completion:*' menu select
zstyle ':completion:*' verbose true
zstyle :compinstall filename '/home/cjber/.zshrc'

zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':fzf-tab:*' switch-group ',' '.'
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'
zstyle ':fzf-tab:*' fzf-bindings 'space:accept'
zstyle ':fzf-tab:*' accept-line enter
zstyle ':fzf-tab:*' fzf-pad 4

autoload -U zmv
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search
bindkey "^[[B" down-line-or-beginning-search
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down
bindkey -v '^?' backward-delete-char

export PYTHON_CONFIGURE_OPTS="--enable-shared"
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init --path)"
  eval "$(pyenv init -)"
fi
fpath+=~/.zfunc
fpath+=~/.zshcompletions/conda-zsh-completion
autoload -Uz compinit
compinit
# End of lines added by compinstall
# Lines configured by zsh-newuser-install
setopt extendedhistory histexpiredupsfirst histfindnodups histignoredups histignorespace histsavenodups histverify sharehistory
HISTFILE=~/.cache/history
HISTSIZE=100000
SAVEHIST=100000
# End of lines configured by zsh-newuser-install

alias ssh="kitty +kitten ssh"
alias upd='yes | yay && zinit update --all && nvim +PackerSync'
alias bat="bat --style=grid,numbers --theme TwoDark"
alias conf="cd $HOME/dotfiles/dotfiles; nvim \$(fzf)"
alias empty='trash-empty'
alias la="ncdu"
alias lf="ranger"
alias ls='exa -F --group-directories-first'
alias lg="lazygit"
alias py="ipython"
alias r="radian"
# alias rm="trash"
alias t='todo.sh list'
alias ta='todo.sh add'
alias td='nvim $HOME/drive/todo/todo.txt'
alias v='nvim'
alias vv='nvim $(fzf)'
alias vi='nvim'
alias mb='micromamba'
alias mvr='rsync -a --progress --partial --append-verify --remove-source-files'
alias tl="tldr --list | fzf --preview 'tldr {} --color always' | xargs tldr"

export DOTREPO="$HOME/dotfiles"
export npm_config_prefix="$HOME/.local"
export DOTDROP_PROFILE='home'
alias dotdrop='dotdrop --cfg=$HOME/dotfiles/config.yaml'
alias dotgit="git -C $DOTREPO"
alias dotsync="dotgit pull origin master && dotgit add -A && dotgit commit && dotgit push origin master; dotdrop install"

# Change cursor shape for different vi modes.
function zle-keymap-select () {
    case $KEYMAP in
        vicmd) echo -ne '\e[1 q';;      # block
        viins|main) echo -ne '\e[5 q';; # beam
    esac
}
zle -N zle-keymap-select
zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.
preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.

# prompt
eval "$(starship init zsh)"


export GOPATH="$HOME/.go"
export PYENV_ROOT="$HOME/.pyenv"

path+=$GOPATH/bin
path+=$PYENV_ROOT/bin
path+=$HOME/.cargo/bin
path+=$HOME/bin
path+=$HOME/.local/bin
path+=$HOME/.poetry/bin
path+=/usr/share/dotnet/dotnet
export PATH

ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#5c6370,bold,underline"
HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND="fg=#bb9af7,bold,underline"

# >>> mamba initialize >>>
# !! Contents within this block are managed by 'mamba init' !!
export MAMBA_EXE="/home/cjber/bin/micromamba";
export MAMBA_ROOT_PREFIX="/home/cjber/.mamba";
__mamba_setup="$('/home/cjber/bin/micromamba' shell hook --shell zsh --prefix '/home/cjber/.mamba' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__mamba_setup"
else
    if [ -f "/home/cjber/.mamba/etc/profile.d/mamba.sh" ]; then
        . "/home/cjber/.mamba/etc/profile.d/mamba.sh"
    else
        export PATH="/home/cjber/.mamba/bin:$PATH"
    fi
fi
unset __mamba_setup
# <<< mamba initialize <<<

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust \
    rupa/z \
    changyuheng/fz \
    Aloxaf/fzf-tab \
    zsh-users/zsh-completions \
    zsh-users/zsh-autosuggestions \
    zsh-users/zsh-history-substring-search \
    zdharma-continuum/fast-syntax-highlighting


### End of Zinit's installer chunk

export PATH="$HOME/.poetry/bin:$PATH"

if [ -n "$PYTHONPATH" ]; then
    export PYTHONPATH='/home/cjber/.local/share/pdm/venv/lib/python3.10/site-packages/pdm/pep582':$PYTHONPATH
else
    export PYTHONPATH='/home/cjber/.local/share/pdm/venv/lib/python3.10/site-packages/pdm/pep582'
fi

source /usr/share/fzf/key-bindings.zsh
